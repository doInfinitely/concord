rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function authed() {
      return request.auth != null;
    }

    function isMemberDoc(conv) {
      return authed()
             && conv != null
             && conv.data.members is list
             && request.auth.uid in conv.data.members;
    }

    match /users/{uid} {
      allow read: if authed();
      allow write: if authed() && request.auth.uid == uid;
    }

    match /conversations/{cid} {
      allow get: if isMemberDoc(resource);
      allow list: if authed();

      allow create: if authed()
                    && request.resource.data.members is list
                    && request.auth.uid in request.resource.data.members
                    && request.resource.data.memberCount == request.resource.data.members.size();

      // Allow members to update conversation (for name changes and lastMessage updates)
      allow update: if isMemberDoc(resource)
                    && (request.resource.data.members == resource.data.members)
                    && (request.resource.data.memberCount == resource.data.memberCount)
                    && (!('dmKey' in resource.data) || (request.resource.data.dmKey == resource.data.dmKey));

      match /messages/{mid} {
        allow read: if isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));

        // Allow creating messages with threading fields
        // Allow either regular user messages OR AI assistant messages
        allow create: if authed()
                      && isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)))
                      && (request.resource.data.senderId == request.auth.uid || 
                          request.resource.data.senderId == 'ai_assistant')
                      && request.resource.data.text is string
                      && request.resource.data.text.size() <= 5000;

        // Allow updating replyCount for threading and rsvpData for RSVP tracking
        allow update: if authed()
                      && isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)))
                      && (onlyUpdatingReplyCount() || onlyUpdatingRSVP());
        
        function onlyUpdatingReplyCount() {
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replyCount']);
        }
        
        function onlyUpdatingRSVP() {
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvpData']);
        }
      }

      match /typing/{docUid} {
        allow read: if isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
        allow write: if authed()
                      && request.auth.uid == docUid
                      && isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
      }

      match /readReceipts/{uid} {
        allow read: if isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
        allow write: if authed()
                      && request.auth.uid == uid
                      && isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
      }

      match /unreads/{uid} {
        allow read: if isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
        allow write: if authed()
                      && isMemberDoc(get(/databases/$(database)/documents/conversations/$(cid)));
      }
    }
  }
}

